/*
 * kv_store_test.h
 *
 *  Created on: Jun 11, 2012
 *      Author: eleanor
 */

#define EINCONSIST 135

#include "key_value_store/key_value_structure.h"
#include "key_value_store/kv_flat_btree_async.h"
#include "include/rados/librados.hpp"

#include <string>
#include <climits>
#include <cfloat>
#include <iostream>

using namespace std;
using ceph::bufferlist;

class StopWatch {
protected:
  utime_t begin_time;
  utime_t end_time;
public:
  void start_time();
  void stop_time();
  double get_time();
  void clear();
};

struct set_args {
  KeyValueStructure * kvs;
  string key;
  bufferlist val;
  StopWatch sw;
};

struct rm_args {
  KeyValueStructure * kvs;
  string key;
  StopWatch sw;
};

struct kv_bench_datum {
  double latency;
  char op;
};

struct kv_bench_data {
  double avg_latency;
  double min_latency;
  double max_latency;
  double total_latency;
  int started_ops;
  int completed_ops;
  std::map<int,int> freq_map;
  pair<int,int> mode;
  kv_bench_data()
  : avg_latency(0.0), min_latency(DBL_MAX), max_latency(0.0),
    total_latency(0.0),
    started_ops(0), completed_ops(0)
  {}
};

class KvStoreTest;

typedef pair<string, bufferlist> (KvStoreTest::*next_gen_t)(bool new_elem);

class KvStoreTest {
protected:
  int k;

  int wait_time;
  int entries;
  int ops;
  int clients;
  double increment;
  int key_size;
  int val_size;
  map<int, char> probs;
  set<string> key_map;
  kv_bench_data data;
  char inject;
  KeyValueStructure * kvs;
  string client_name;

  /*
   * rados_id	op_char	latency
   */
  void print_time_datum(ostream * s, kv_bench_datum d);

  /**
   * prints the latency statistics generated by test_stress_random_set_rms
   */
  void print_time_data();

  /**
   * Called by concurrent tests to run and time a set operation
   */
  static void *pset(void *ptr);

  /**
   * called by concurrent tests to run and time a remove operation
   */
  static void *prm(void *ptr);


public:
  KvStoreTest();

  ~KvStoreTest();

  int setup(int argc, const char** argv);

  string random_string(int len);

  pair<string, bufferlist> rand_distr(bool new_elem);

  /**
   * Test of correctness for the set, get, and remove methods. Stores two
   * key/values, displays them, and then overwrites one of them,
   * displaying the result.
   *
   * @return error code.
   */
  int test_set_get_rm_one_kv();

  /**
   * Test of correctness for split and merge, including both rebalance
   * and merge.
   */
  int test_split_merge();

  /**
   * Tests entries sets of sequentially increasing keys, in forward and
   * reverse order
   */
  int test_non_random_insert_gets();

  /**
   * Tests entries insertions of random keys and values
   */
  int test_random_insertions();

  /**
   * Tests ops insertions and removals of random keys and values.
   * Sets more often than it removes.
   */
  int test_random_ops();

  /**
   * uses varying waitpoints to test two concurrent sets of non-random keys.
   * The number of loops is the number necessary to test all combinations
   * of waitpoints.
   */
  int test_verify_concurrent_sets(int argc, const char** argv);

  /**
   * uses varying waitpoints to test a set and a remove of non-random keys.
   * The number of loops is the number necessary to test all combinations
   * of waitpoints.
   */
  int test_verify_concurrent_set_rms(int argc, const char** argv);

  /**
   * uses varying waitpoints to test concurrent sets and removes of random keys.
   * The number of loops is the number necessary to test all combinations
   * of waitpoints.
   */
  int test_verify_random_set_rms(int argc, const char** argv);

  /**
   * uses varying waitpoints to test concurrent sets and removes of random keys.
   * uses clients threads at once and repeats for ops loops. starts with entries
   * key/value pairs before timing. Prints latency statistics.
   */
  int test_stress_random_set_rms(int argc, const char** argv);

  int test_teuthology(next_gen_t distr, const map<int, char> &probs);

  /**
   * Test correctness of all methods in KeyValueStructure
   */
  int functionality_tests();

  /**
   * Run all sequential stress tests
   * (currently excludes test_stres_random_set_rms)
   */
  int stress_tests();

  /**
   * Run all teuthology tests
   */
  int teuthology_tests();

  /**
   * Run all concurrency tests
   */
  int verification_tests(int argc, const char** argv);
};
